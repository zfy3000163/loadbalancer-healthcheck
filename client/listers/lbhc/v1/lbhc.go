/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "cloud.edge/lbhc-controller/apis/lbhc/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LbhcLister helps list Lbhcs.
// All objects returned here must be treated as read-only.
type LbhcLister interface {
	// List lists all Lbhcs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Lbhc, err error)
	// Lbhcs returns an object that can list and get Lbhcs.
	Lbhcs(namespace string) LbhcNamespaceLister
	LbhcListerExpansion
}

// lbhcLister implements the LbhcLister interface.
type lbhcLister struct {
	indexer cache.Indexer
}

// NewLbhcLister returns a new LbhcLister.
func NewLbhcLister(indexer cache.Indexer) LbhcLister {
	return &lbhcLister{indexer: indexer}
}

// List lists all Lbhcs in the indexer.
func (s *lbhcLister) List(selector labels.Selector) (ret []*v1.Lbhc, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Lbhc))
	})
	return ret, err
}

// Lbhcs returns an object that can list and get Lbhcs.
func (s *lbhcLister) Lbhcs(namespace string) LbhcNamespaceLister {
	return lbhcNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LbhcNamespaceLister helps list and get Lbhcs.
// All objects returned here must be treated as read-only.
type LbhcNamespaceLister interface {
	// List lists all Lbhcs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Lbhc, err error)
	// Get retrieves the Lbhc from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Lbhc, error)
	LbhcNamespaceListerExpansion
}

// lbhcNamespaceLister implements the LbhcNamespaceLister
// interface.
type lbhcNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Lbhcs in the indexer for a given namespace.
func (s lbhcNamespaceLister) List(selector labels.Selector) (ret []*v1.Lbhc, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Lbhc))
	})
	return ret, err
}

// Get retrieves the Lbhc from the indexer for a given namespace and name.
func (s lbhcNamespaceLister) Get(name string) (*v1.Lbhc, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("lbhc"), name)
	}
	return obj.(*v1.Lbhc), nil
}
